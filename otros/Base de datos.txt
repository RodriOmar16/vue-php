hice varios cambios:
tabla usuarios queda as√≠: 
CREATE TABLE esquema1.usuarios (
	id serial4 NOT NULL,
	nombre varchar(100) NOT NULL,
	email varchar(150) NOT NULL,
	"password" varchar(255) NOT NULL,
	creado_en timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	username varchar(30) NULL,
	inhabilitado bool NULL,
	rol_id int4 NOT NULL,
	actualizado_en timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	CONSTRAINT usuarios_email_key UNIQUE (email),
	CONSTRAINT usuarios_pkey PRIMARY KEY (id),
	CONSTRAINT fk_rol FOREIGN KEY (rol_id) REFERENCES esquema1.roles(id)
);
CREATE INDEX idx_usuarios_email ON esquema1.usuarios USING btree (email);

tabla combos:
CREATE TABLE esquema1.combos (
	id serial4 NOT NULL,
	nombre varchar(100) NOT NULL,
	descripcion text NULL,
	cant_max_personas int4 NOT NULL,
	precio_base numeric(10, 2) NOT NULL,
	precio_adicional_persona numeric(10, 2) NULL,
	inhabilitada bool NULL,
	servicio bool NULL,
	invitacion bool NULL,
	bebidas bool NULL,
	observacion varchar(30) NULL,
	creado_en timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	actualizado_en timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	CONSTRAINT combos_pkey PRIMARY KEY (id)
);

tabla dias:
CREATE TABLE esquema1.dias (
	id serial4 NOT NULL,
	nombre public.dias_enum NOT NULL,
	CONSTRAINT dias_pkey PRIMARY KEY (id)
);

tabla combo_dias:
CREATE TABLE esquema1.combo_dias (
	id serial4 NOT NULL,
	combo_id int4 NULL,
	dia_id int4 NULL,
	CONSTRAINT combo_dias_pkey PRIMARY KEY (id),
	CONSTRAINT combo_dias_combo_id_fkey FOREIGN KEY (combo_id) REFERENCES esquema1.combos(id),
	CONSTRAINT combo_dias_dia_id_fkey FOREIGN KEY (dia_id) REFERENCES esquema1.dias(id)
);
CREATE TABLE esquema1.combo_precios (
	id serial4 NOT NULL,
	combo_id int4 NOT NULL,
	dia_id int4 NOT NULL,
	precio numeric(10, 2) NOT NULL,
	CONSTRAINT combo_precios_pkey PRIMARY KEY (id),
	CONSTRAINT combo_precios_combo_id_fkey FOREIGN KEY (combo_id) REFERENCES esquema1.combos(id),
	CONSTRAINT combo_precios_dia_id_fkey FOREIGN KEY (dia_id) REFERENCES esquema1.dias(id)
);

tabla bebidas:
CREATE TABLE esquema1.bebidas (
	id serial4 NOT NULL,
	nombre varchar(50) NULL,
	litros numeric(5, 2) NULL,
	inhabilitada int4 NULL,
	CONSTRAINT bebidas_pkey PRIMARY KEY (id)
);

tabla combo_bebidas:
CREATE TABLE esquema1.combo_bebidas (
	id int4 DEFAULT nextval('esquema1.combo_comidas_id_seq'::regclass) NOT NULL,
	combo_id int4 NULL,
	bebida_id int4 NULL,
	CONSTRAINT combo_comidas_pkey PRIMARY KEY (id),
	CONSTRAINT combo_comidas_bebida_id_fkey FOREIGN KEY (bebida_id) REFERENCES esquema1.bebidas(id),
	CONSTRAINT combo_comidas_combo_id_fkey FOREIGN KEY (combo_id) REFERENCES esquema1.combos(id)
);

tabla menus:
CREATE TABLE esquema1.menus (
    id SERIAL PRIMARY KEY,
    descripcion varchar(30),
    inhabilitado INTEGER default null
);

tabla comidas:
CREATE TABLE esquema1.comidas (
    id SERIAL PRIMARY KEY,
    nombre varchar(50),
    descripcion varchar(50)
);

tabla menu_comidas, une menus y comidas
CREATE TABLE esquema1.menu_comidas (
    id SERIAL PRIMARY KEY,
    menu_id INTEGER REFERENCES esquema1.menus(id),
    comida_id INTEGER REFERENCES esquema1.comidas(id)
);

tabla combo_menus, une 1 combo y los menus que tenga:
CREATE TABLE esquema1.combo_menus_comidas (
    id SERIAL PRIMARY KEY,
    combo_id INTEGER REFERENCES esquema1.combos(id),
    menu_id INTEGER REFERENCES esquema1.menus(id)
);

tabla instalaciones:
CREATE TABLE esquema1.instalaciones(
    id SERIAL PRIMARY KEY,
    nombre varchar(50),
    descripcion varchar(50),
    edad_uso INTEGER,
    inhabilitado INTEGER default null
);

tabla combo_instalaciones:
CREATE TABLE esquema1.combo_instalaciones (
    id SERIAL PRIMARY KEY,
    combo_id INTEGER REFERENCES esquema1.combos(id),
    instalacion_id INTEGER REFERENCES esquema1.instalaciones(id)
);

tabla horarios:
CREATE TABLE esquema1.horarios (
    id SERIAL PRIMARY KEY,
    hora_inicio TIME NOT NULL,
    hora_fin TIME NOT NULL
);

tabla estados:
CREATE TABLE esquema1.estados (
    id SERIAL PRIMARY KEY,
    nombre varchar(30),
    inhabilitado INTEGER default null
);

tabla clientes:
CREATE TABLE esquema1.clientes (
	id serial NOT NULL PRIMARY KEY,
	nombre varchar(100) NOT NULL,
        fecha_nacimiento DATE,
	email varchar(100) NOT NULL,
	edad integer,
	telefono varchar(15),
	direccion varchar(30) NULL,
	inhabilitado int4 NULL,
	creado_en timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	actualizado_en timestamp DEFAULT CURRENT_TIMESTAMP NULL
);

tabla de reservas:
CREATE TABLE esquema1.reservas (
    id SERIAL PRIMARY KEY,
    fecha_grabacion DATE NOT NULL,
    fecha_evento DATE NOT NULL,
    cliente_id INTEGER REFERENCES esquema1.clientes(id),
    estado_id INTEGER REFERENCES esquema1.estados(id),
    horario_id INTEGER REFERENCES esquema1.horarios(id),
    cantidad_invitados INTEGER NOT NULL,
    combo_id INTEGER REFERENCES esquema1.combos(id),
    inhabilitada INTEGER DEFAULT null,
    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    actualizado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-----------------------------------------------------------------------------------------
CREATE TABLE combos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    precio_base DECIMAL(10, 2) NOT NULL,
    capacidad_personas INT NOT NULL,
    precio_adicional DECIMAL(10, 2),
    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    actualizado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE combo_detalle (
    id SERIAL PRIMARY KEY,
    combo_id INT REFERENCES combos(id),
    tipo VARCHAR(20) CHECK (tipo IN ('instalacion', 'bebida', 'comida', 'otro')),
    descripcion TEXT,
    cantidad INT,
    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-------------------------------------------------------------------------------------
CREATE TABLE esquema1.combos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    cantidad_personas INTEGER NOT NULL,
    precio_base DECIMAL(10, 2) NOT NULL,
    precio_adicional_persona DECIMAL(10, 2),
    inhabilitada INTEGER DEFAULT null,
    servicio INTEGER, -- 1 o NULL dependiendo si cuenta con servicio de mozos
    invitacion INTEGER, -- 1 o NULL dependiendo si cuenta con invitacion virtual
    bebidas INTEGER, -- 1 o NULL dependiendo si cuenta con bebidas, tabla combo_bebidas
    observacion TEXT,
    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    actualizado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
--------------------------------------------------------------------------------